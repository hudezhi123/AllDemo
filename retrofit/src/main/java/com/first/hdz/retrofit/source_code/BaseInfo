Retrofit



请求方法：

@GET       GET请求
@POST      POST 请求
@DELETE     DELETE请求
@HEAD       HEAD请求
@OPTIONS    OPTIONS请求
@PATCH      PATCH请求


请求参数：

@Headers           添加请求头
@Path              替换路径
@Query             替代参数值，通常是结合get请求
@FormUrlEncoded    用表单数据提交
@Field             替换参数值，是结合post请求的


添加依赖：
dependencies{
    // gradle 3.0 以前
    compile 'com.squareup.okhttp3:okhttp:3.1.2'
    compile 'com.squareup.retrofit.retrofit:2.0.2'

    // gradle 3.0 以后
    implementation 'com.squareup.okhttp3:okhttp:3.1.2'
    implementation 'com.squareup.retrofit.retrofit:2.0.2'
}


添加网络权限
<uses-permission android:name="android.permission.INTERNET" />


创建接受服务器返回数据的类
public class News{

}

创建用于描述网络请求的接口
public interface Api{
    // @GET注解的作用：采用Get方法发送网络请求
    // getNews(...) => 接受网络请求数据的方法
    // 其中返回类型为 Call<News>,News是接收数据的类(即上面定义的News类)
    // 如果想直接获取 ResponseBody 中的内容，可以定位网络请求返回值 Call<ResponseBody>
    @Headers("apikey:81bf9da930c7f9825a3c3383f1d8d766")
    @GET("word/word")
    Call<News> getNews(@Query("num") String num,@Query("page") String page);
}


baseUrl = "http://apis.baidu.com/txapi/";

@GET(word/word)
http://apis.baidu.com/txapi/word/word

@Query("num") String num,@Query("page") String page
http://apis.baidu.com/txapi/word/word?num=num&page=page


Constant.USER = "user";

@GET(Constant.USER+"{login}")
Observable<ResponseBody> longin(@Path("login") Strnig login);
http://apis.baidu.com/txapi/user/login

上面的GET注解的接口通过{}占位符来标记的login,是用 @Path 注解在传输login的值


@Header和@Headers的区别

@GET("user")
Call<User> getUser(@Header("Authorization") String authorization);

@Headers("Authorization:authorization")
@GET("user")
Call<User> getUser();

区别就在于使用场景和使用方式
使用场景： @Header用于添加不固定的请求头，@Headers用于添加固定的请求头
适用范围： @Header用于方法的参数，@Headers作用于方法


创建 Retrofit 对象

Retrofit retrofit = new Retrofit.Builder()
        .addConverterFactory(GsonConverterFactory.create())
        .addCallAdapterFactory()
        .baseUrl("http://apis.baidu.com/txapi/")
        .build();

Retrofit中的URL地址，采用BaseUrl+Path的模式，其中Path尽量不以'/'开头。


关于解析器(Converter)
.addConverterFactory(GsonConverterFactory.create())
这句代码的作用是使得来自接口的json结果会自动解析为定义好了的字段和类型都符合json对象接受类

数据解析器	Gradle依赖
Gson	         com.squareup.retrofit2:converter-gson:2.0.2
Jackson	         com.squareup.retrofit2:converter-jackson:2.0.2
Simple XML	     com.squareup.retrofit2:converter-simplexml:2.0.2
Protobuf	     com.squareup.retrofit2:converter-protobuf:2.0.2
Moshi	         com.squareup.retrofit2:converter-moshi:2.0.2
Wire	         com.squareup.retrofit2:converter-wire:2.0.2
Scalars	         com.squareup.retrofit2:converter-scalars:2.0.2


addCallAdapterFactory()
Call<News> news = api.getNews("1","10");
返回的Call<News>可以理解为生成源生的了，默认这么写。但是很多项目都是结合着RXJava来使用这个Retrofit，
那么这个接口就会被定义为（伪代码）：
Observable<News> news = api.getNews("1","10").subscribeOn(...).observeOn(...);
他返回的是一个Observable类型(观察者模式)。从上面可以看到，Retrofit接口的返回值可以分为两个部分，第一
部分是返回值类型：Call或者Observable，另一部分是泛型：News
addCallAdapterFactory()影响的是第一部分：Call或者Observable。Call类型是Retrofit默认支持的(Retrofit内
部有一个DefaultCallAdapterFactory)，所以如果你不用RXjava+Retrofit结合使用，那就自动忽略这个方法，而
如果你想要支持RXjava(就是想把返回值定义为Observable对象)，就需要我们自己用addCallAdapterFactory()添加：
   addCallAdapterFactory(RxJavaCallAdapterFactory.create())

retrofit = new Retrofit.Builder()
        .baseUrl(Constants.BASE_URL)
        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
        .addConverterFactory(GsonConverterFactory.create())
        .client(okHttpClient)
        .build();


发起网络请求：
Call<News> news = api.getNews("1","10");
news.enqueue(new CallBack<News>{

    @Override
    public void onResponse(Call<News> call,Response<News> response){
        //请求处理，输出结果： response.body().show();
    }

    @Override
    public void onFailure(Call<News> call,Throwable t){
        //请求失败时调用
    }
});

上面是一个简单的GET请求过程
补充一点，Retrofit还有个发起同步网络请求的方式：
Response<Reception> response = api.getNews("1","10").execute();



Retrofit的POST请求
POST请求与GET请求算是我们日常开发中最常用的两种网络访问方式，Retrofit的POST请求在用法上与GET区别不大。








Retrofit下载文件

其实用Retrofit下载文件方式与其他请求几乎无异。
public interface IServiceApi{

    @Streaming
    @GET
    Observable<ResponseBody> retrofitDownloadFile(@Url String fileUrl);  和RxJava联合使用的结果

}
上面代码有几个注意点：
1、@Streaming是注解大文件的，小文件可以忽略不加注释，但是大文件一定要加注释，不然会出现OOM
2、fileURL就是文件的下载地址，通过参数形式传进来
3、正常来讲，API接口的返回类型是Call<ResponseBody> 即：
public interface IServiceApi{

    @Streaming
    @GET
    Call<ResponseBody> retrofitDownloadFile(@Url String fileUrl);

}


@HTTP
作用：替换@GET、@POST、@PUT、@DELETE、@HEAD注解的作用及更多功能拓展
具体使用：通过属性method、path、hasBody进行设置

public interface GetRequest{

    /**
     * method：网络请求的方法（区别大小写）
     * path：网络请求地址路径
     * hasBody：是否有请求体
     */
    @HTTP(method="GET",path="blog/{id}",hasBody=false)
    Call<ResponseBody> getCall(@Path("id") int id);
}


标记

            @FormUrlEncoded                  表示请求体是一个Form表单

标记类      @Multipart                       表示请求体是一个支持文件上传的Form表单

            @Streaming                       表示返回的数据以流的形式返回；适用于返回数据较大的场景
                                            (如果没有使用该注解，默认把数据全部载入内存，之后获取数据也是从内存中读取)

@FormUrlEncoded
    作用：表示发送form-encoded的数据
    每个键值对需要使用 @Filed 来注解键名，随后的对象需要提供值。

    @POST("form")
    @FormUrlEncoded
    Call<ResponseBody> test1(@Field("username") String username,@Field("age") int age);

@Multipart
     作用：表示发送form-encoded的数据（适用于有文件上传的场景）
     每个键值对需要用 @Part 来注解，随后的对象需要提供值。

     @POST("form")
     @Multipart
     Call<ResponseBody> test2(@Part("name") RequestBody name,@Part("age") RequestBody age,@Part MultipartBody.Part file);

